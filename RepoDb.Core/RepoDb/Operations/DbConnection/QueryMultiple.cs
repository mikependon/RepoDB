using RepoDb.Extensions;
using RepoDb.Interfaces;
using RepoDb.Reflection;
using RepoDb.Requests;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace RepoDb
{
    /// <summary>
    /// Contains the extension methods for <see cref="IDbConnection"/> object.
    /// </summary>
    public static partial class DbConnectionExtension
    {
        #region QueryMultiple<TEntity>

        #region T1, T2

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic expression or the key value to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            object what1,
            object what2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                where1: WhatToQueryGroup(typeof(T1), connection, what1, transaction),
                where2: WhatToQueryGroup(typeof(T2), connection, what2, transaction),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                where1: where1,
                where2: where2,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultipleInternal<T1, T2>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        #endregion

        #region T1, T2, T3

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                where1: WhatToQueryGroup(what1),
                where2: WhatToQueryGroup(what2),
                where3: WhatToQueryGroup(what3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultipleInternal<T1, T2, T3>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        #endregion

        #region T1, T2, T3, T4

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            object what4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                where1: WhatToQueryGroup(what1),
                where2: WhatToQueryGroup(what2),
                where3: WhatToQueryGroup(what3),
                where4: WhatToQueryGroup(what4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            Expression<Func<T4, bool>> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            QueryField where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<QueryField> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                where4: where4,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultipleInternal<T1, T2, T3, T4>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                tableName4: ClassMappedNameCache.Get<T4>(),
                where4: where4,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        #endregion

        #region T1, T2, T3, T4, T5

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            object what4,
            object what5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: WhatToQueryGroup(what1),
                where2: WhatToQueryGroup(what2),
                where3: WhatToQueryGroup(what3),
                where4: WhatToQueryGroup(what4),
                where5: WhatToQueryGroup(what5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            Expression<Func<T4, bool>> where4,
            Expression<Func<T5, bool>> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            QueryField where4,
            QueryField where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<QueryField> where4,
            IEnumerable<QueryField> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                where4: where4,
                where5: where5,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultipleInternal<T1, T2, T3, T4, T5>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                tableName4: ClassMappedNameCache.Get<T4>(),
                where4: where4,
                tableName5: ClassMappedNameCache.Get<T5>(),
                where5: where5,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="what6">The dynamic query expression or the key value to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            object what4,
            object what5,
            object what6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: WhatToQueryGroup(what1),
                where2: WhatToQueryGroup(what2),
                where3: WhatToQueryGroup(what3),
                where4: WhatToQueryGroup(what4),
                where5: WhatToQueryGroup(what5),
                where6: WhatToQueryGroup(what6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            Expression<Func<T4, bool>> where4,
            Expression<Func<T5, bool>> where5,
            Expression<Func<T6, bool>> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            QueryField where4,
            QueryField where5,
            QueryField where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<QueryField> where4,
            IEnumerable<QueryField> where5,
            IEnumerable<QueryField> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                where4: where4,
                where5: where5,
                where6: where6,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                tableName4: ClassMappedNameCache.Get<T4>(),
                where4: where4,
                tableName5: ClassMappedNameCache.Get<T5>(),
                where5: where5,
                tableName6: ClassMappedNameCache.Get<T6>(),
                where6: where6,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6, T7

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="what6">The dynamic query expression or the key value to be used (for T6).</param>
        /// <param name="what7">The dynamic query expression or the key value to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            object what4,
            object what5,
            object what6,
            object what7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: WhatToQueryGroup(what1),
                where2: WhatToQueryGroup(what2),
                where3: WhatToQueryGroup(what3),
                where4: WhatToQueryGroup(what4),
                where5: WhatToQueryGroup(what5),
                where6: WhatToQueryGroup(what6),
                where7: WhatToQueryGroup(what7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            Expression<Func<T4, bool>> where4,
            Expression<Func<T5, bool>> where5,
            Expression<Func<T6, bool>> where6,
            Expression<Func<T7, bool>> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            QueryField where4,
            QueryField where5,
            QueryField where6,
            QueryField where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<QueryField> where4,
            IEnumerable<QueryField> where5,
            IEnumerable<QueryField> where6,
            IEnumerable<QueryField> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            QueryGroup where6,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                where4: where4,
                where5: where5,
                where6: where6,
                where7: where7,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            QueryGroup where6,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                tableName4: ClassMappedNameCache.Get<T4>(),
                where4: where4,
                tableName5: ClassMappedNameCache.Get<T5>(),
                where5: where5,
                tableName6: ClassMappedNameCache.Get<T6>(),
                where6: where6,
                tableName7: ClassMappedNameCache.Get<T7>(),
                where7: where7,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        #endregion

        #endregion

        #region QueryMultipleAsync<TEntity>

        #region T1, T2

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            object what1,
            object what2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                where1: where1,
                where2: where2,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        internal static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsyncInternal<T1, T2>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        #endregion

        #region T1, T2, T3

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        internal static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsyncInternal<T1, T2, T3>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        #endregion

        #region T1, T2, T3, T4

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            object what4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                where4: await WhatToQueryGroupAsync(typeof(T4), connection, what4, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            Expression<Func<T4, bool>> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            QueryField where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<QueryField> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                where4: where4,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        internal static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsyncInternal<T1, T2, T3, T4>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                tableName4: ClassMappedNameCache.Get<T4>(),
                where4: where4,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        #endregion

        #region T1, T2, T3, T4, T5

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            object what4,
            object what5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                where4: await WhatToQueryGroupAsync(typeof(T4), connection, what4, transaction, cancellationToken),
                where5: await WhatToQueryGroupAsync(typeof(T5), connection, what5, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            Expression<Func<T4, bool>> where4,
            Expression<Func<T5, bool>> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            QueryField where4,
            QueryField where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<QueryField> where4,
            IEnumerable<QueryField> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        internal static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                tableName4: ClassMappedNameCache.Get<T4>(),
                where4: where4,
                tableName5: ClassMappedNameCache.Get<T5>(),
                where5: where5,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="what6">The dynamic query expression or the key value to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            object what4,
            object what5,
            object what6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                where4: await WhatToQueryGroupAsync(typeof(T4), connection, what4, transaction, cancellationToken),
                where5: await WhatToQueryGroupAsync(typeof(T5), connection, what5, transaction, cancellationToken),
                where6: await WhatToQueryGroupAsync(typeof(T6), connection, what6, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            Expression<Func<T4, bool>> where4,
            Expression<Func<T5, bool>> where5,
            Expression<Func<T6, bool>> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            QueryField where4,
            QueryField where5,
            QueryField where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<QueryField> where4,
            IEnumerable<QueryField> where5,
            IEnumerable<QueryField> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                where4: where4,
                where5: where5,
                where6: where6,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        internal static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                tableName4: ClassMappedNameCache.Get<T4>(),
                where4: where4,
                tableName5: ClassMappedNameCache.Get<T5>(),
                where5: where5,
                tableName6: ClassMappedNameCache.Get<T6>(),
                where6: where6,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6, T7

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="what6">The dynamic query expression or the key value to be used (for T6).</param>
        /// <param name="what7">The dynamic query expression or the key value to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            object what1,
            object what2,
            object what3,
            object what4,
            object what5,
            object what6,
            object what7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                where4: await WhatToQueryGroupAsync(typeof(T4), connection, what4, transaction, cancellationToken),
                where5: await WhatToQueryGroupAsync(typeof(T5), connection, what5, transaction, cancellationToken),
                where6: await WhatToQueryGroupAsync(typeof(T6), connection, what6, transaction, cancellationToken),
                where7: await WhatToQueryGroupAsync(typeof(T7), connection, what7, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            Expression<Func<T1, bool>> where1,
            Expression<Func<T2, bool>> where2,
            Expression<Func<T3, bool>> where3,
            Expression<Func<T4, bool>> where4,
            Expression<Func<T5, bool>> where5,
            Expression<Func<T6, bool>> where6,
            Expression<Func<T7, bool>> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            QueryField where1,
            QueryField where2,
            QueryField where3,
            QueryField where4,
            QueryField where5,
            QueryField where6,
            QueryField where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            IEnumerable<QueryField> where1,
            IEnumerable<QueryField> where2,
            IEnumerable<QueryField> where3,
            IEnumerable<QueryField> where4,
            IEnumerable<QueryField> where5,
            IEnumerable<QueryField> where6,
            IEnumerable<QueryField> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: ToQueryGroup(where1),
                where2: ToQueryGroup(where2),
                where3: ToQueryGroup(where3),
                where4: ToQueryGroup(where4),
                where5: ToQueryGroup(where5),
                where6: ToQueryGroup(where6),
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            QueryGroup where6,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                where1: where1,
                where2: where2,
                where3: where3,
                where4: where4,
                where5: where5,
                where6: where6,
                where7: where7,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        internal static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            QueryGroup where1,
            QueryGroup where2,
            QueryGroup where3,
            QueryGroup where4,
            QueryGroup where5,
            QueryGroup where6,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: ClassMappedNameCache.Get<T1>(),
                where1: where1,
                tableName2: ClassMappedNameCache.Get<T2>(),
                where2: where2,
                tableName3: ClassMappedNameCache.Get<T3>(),
                where3: where3,
                tableName4: ClassMappedNameCache.Get<T4>(),
                where4: where4,
                tableName5: ClassMappedNameCache.Get<T5>(),
                where5: where5,
                tableName6: ClassMappedNameCache.Get<T6>(),
                where6: where6,
                tableName7: ClassMappedNameCache.Get<T7>(),
                where7: where7,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        #endregion

        #endregion

        #region QueryMultiple(TableName)

        #region TEntity

        #region T1, T2

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
        /// <param name="what1">The dynamic expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
        /// <param name="what2">The dynamic expression or the key value to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
        /// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
        /// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        /// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(typeof(T1), connection, what1, transaction),
                tableName2: tableName2,
                where2: WhatToQueryGroup(typeof(T2), connection, what2, transaction),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultiple<T1, T2>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>> QueryMultipleInternal<T1, T2>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo<T2>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(typeof(T1), connection, what1, transaction),
                tableName2: tableName2,
                where2: WhatToQueryGroup(typeof(T2), connection, what2, transaction),
                tableName3: tableName3,
                where3: WhatToQueryGroup(typeof(T3), connection, what3, transaction),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultiple<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> QueryMultipleInternal<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo<T3>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // Result
                result = Tuple.Create(item1, item2, item3);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="what4">The dynamic expression or the key value to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(typeof(T1), connection, what1, transaction),
                tableName2: tableName2,
                where2: WhatToQueryGroup(typeof(T2), connection, what2, transaction),
                tableName3: tableName3,
                where3: WhatToQueryGroup(typeof(T3), connection, what3, transaction),
                tableName4: tableName4,
                where4: WhatToQueryGroup(typeof(T4), connection, what4, transaction),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            string tableName4,
            Expression<Func<T4, bool>> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultiple<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>
            QueryMultipleInternal<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups);

            var item4 = QueryMultipleInternal<T4>(cacheKey4,
                cache,
                where4,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo<T3>());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4 ?? FieldCache.Get<T4>(),
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request4));
                maps.Add(where4.MapTo<T4>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // T4
                item4 = QueryMultipleInternal<T4>(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2, item3, item4);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="what4">The dynamic expression or the key value to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="what5">The dynamic expression or the key value to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(typeof(T1), connection, what1, transaction),
                tableName2: tableName2,
                where2: WhatToQueryGroup(typeof(T2), connection, what2, transaction),
                tableName3: tableName3,
                where3: WhatToQueryGroup(typeof(T3), connection, what3, transaction),
                tableName4: tableName4,
                where4: WhatToQueryGroup(typeof(T4), connection, what4, transaction),
                tableName5: tableName5,
                where5: WhatToQueryGroup(typeof(T5), connection, what5, transaction),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            string tableName4,
            Expression<Func<T4, bool>> where4,
            string tableName5,
            Expression<Func<T5, bool>> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultiple<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>
            QueryMultipleInternal<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups);

            var item4 = QueryMultipleInternal<T4>(cacheKey4,
                cache,
                where4,
                queryGroups);

            var item5 = QueryMultipleInternal<T5>(cacheKey5,
                cache,
                where5,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo<T3>());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4 ?? FieldCache.Get<T4>(),
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request4));
                maps.Add(where4.MapTo<T4>());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5 ?? FieldCache.Get<T5>(),
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request5));
                maps.Add(where5.MapTo<T5>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // T4
                item4 = QueryMultipleInternal<T4>(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T5
                item5 = QueryMultipleInternal<T5>(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="what4">The dynamic expression or the key value to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="what5">The dynamic expression or the key value to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="what6">The dynamic expression or the key value to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            string tableName6,
            object what6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(typeof(T1), connection, what1, transaction),
                tableName2: tableName2,
                where2: WhatToQueryGroup(typeof(T2), connection, what2, transaction),
                tableName3: tableName3,
                where3: WhatToQueryGroup(typeof(T3), connection, what3, transaction),
                tableName4: tableName4,
                where4: WhatToQueryGroup(typeof(T4), connection, what4, transaction),
                tableName5: tableName5,
                where5: WhatToQueryGroup(typeof(T5), connection, what5, transaction),
                tableName6: tableName6,
                where6: WhatToQueryGroup(typeof(T6), connection, what6, transaction),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            string tableName4,
            Expression<Func<T4, bool>> where4,
            string tableName5,
            Expression<Func<T5, bool>> where5,
            string tableName6,
            Expression<Func<T6, bool>> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            string tableName6,
            QueryField where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            string tableName6,
            IEnumerable<QueryField> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultiple<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                tableName6: tableName6,
                where6: where6,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>
            QueryMultipleInternal<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups);

            var item4 = QueryMultipleInternal<T4>(cacheKey4,
                cache,
                where4,
                queryGroups);

            var item5 = QueryMultipleInternal<T5>(cacheKey5,
                cache,
                where5,
                queryGroups);

            var item6 = QueryMultipleInternal<T6>(cacheKey6,
                cache,
                where6,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo<T3>());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4 ?? FieldCache.Get<T4>(),
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request4));
                maps.Add(where4.MapTo<T4>());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5 ?? FieldCache.Get<T5>(),
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request5));
                maps.Add(where5.MapTo<T5>());
            }

            // Item6 Request
            if (item6 == null)
            {
                var request6 = new QueryMultipleRequest(6,
                    tableName6,
                    connection,
                    transaction,
                    fields6 ?? FieldCache.Get<T6>(),
                    where6,
                    orderBy6,
                    top6,
                    hints6,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request6));
                maps.Add(where6.MapTo<T6>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // T4
                item4 = QueryMultipleInternal<T4>(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T5
                item5 = QueryMultipleInternal<T5>(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T6
                item6 = QueryMultipleInternal<T6>(connection,
                    reader,
                    item6,
                    cacheKey6,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5, item6);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6, T7

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="what4">The dynamic expression or the key value to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="what5">The dynamic expression or the key value to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="what6">The dynamic expression or the key value to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="what7">The dynamic expression or the key value to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            string tableName6,
            object what6,
            string tableName7,
            object what7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(typeof(T1), connection, what1, transaction),
                tableName2: tableName2,
                where2: WhatToQueryGroup(typeof(T2), connection, what2, transaction),
                tableName3: tableName3,
                where3: WhatToQueryGroup(typeof(T3), connection, what3, transaction),
                tableName4: tableName4,
                where4: WhatToQueryGroup(typeof(T4), connection, what4, transaction),
                tableName5: tableName5,
                where5: WhatToQueryGroup(typeof(T5), connection, what5, transaction),
                tableName6: tableName6,
                where6: WhatToQueryGroup(typeof(T6), connection, what6, transaction),
                tableName7: tableName7,
                where7: WhatToQueryGroup(typeof(T7), connection, what7, transaction),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            string tableName4,
            Expression<Func<T4, bool>> where4,
            string tableName5,
            Expression<Func<T5, bool>> where5,
            string tableName6,
            Expression<Func<T6, bool>> where6,
            string tableName7,
            Expression<Func<T7, bool>> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            string tableName6,
            QueryField where6,
            string tableName7,
            QueryField where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            string tableName6,
            IEnumerable<QueryField> where6,
            string tableName7,
            IEnumerable<QueryField> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultiple<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            string tableName7,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                tableName6: tableName6,
                where6: where6,
                tableName7: tableName7,
                where7: where7,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>
            QueryMultipleInternal<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            string tableName7,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups);

            var item4 = QueryMultipleInternal<T4>(cacheKey4,
                cache,
                where4,
                queryGroups);

            var item5 = QueryMultipleInternal<T5>(cacheKey5,
                cache,
                where5,
                queryGroups);

            var item6 = QueryMultipleInternal<T6>(cacheKey6,
                cache,
                where6,
                queryGroups);

            var item7 = QueryMultipleInternal<T7>(cacheKey7,
                cache,
                where7,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo<T3>());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4 ?? FieldCache.Get<T4>(),
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request4));
                maps.Add(where4.MapTo<T4>());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5 ?? FieldCache.Get<T5>(),
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request5));
                maps.Add(where5.MapTo<T5>());
            }

            // Item6 Request
            if (item6 == null)
            {
                var request6 = new QueryMultipleRequest(6,
                    tableName6,
                    connection,
                    transaction,
                    fields6 ?? FieldCache.Get<T6>(),
                    where6,
                    orderBy6,
                    top6,
                    hints6,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request6));
                maps.Add(where6.MapTo<T6>());
            }

            // Item7 Request
            if (item7 == null)
            {
                var request7 = new QueryMultipleRequest(7,
                    tableName7,
                    connection,
                    transaction,
                    fields7 ?? FieldCache.Get<T7>(),
                    where7,
                    orderBy7,
                    top7,
                    hints7,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request7));
                maps.Add(where7.MapTo<T7>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // T4
                item4 = QueryMultipleInternal<T4>(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T5
                item5 = QueryMultipleInternal<T5>(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T6
                item6 = QueryMultipleInternal<T6>(connection,
                    reader,
                    item6,
                    cacheKey6,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T7
                item7 = QueryMultipleInternal<T7>(connection,
                    reader,
                    item7,
                    cacheKey7,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5, item6, item7);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #endregion

        #region Dynamic

        #region T1, T2

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
        /// <param name="what1">The dynamic expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
        /// <param name="what2">The dynamic expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
        /// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
        /// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        /// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultiple(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultiple(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultipleInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal(cacheKey2,
                cache,
                where2,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultiple(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultiple(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> QueryMultipleInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal(cacheKey3,
                cache,
                where3,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // Result
                result = Tuple.Create(item1, item2, item3);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="what4">The dynamic expression or the key value to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                tableName4: tableName4,
                where4: WhatToQueryGroup(what4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultipleInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal(cacheKey3,
                cache,
                where3,
                queryGroups);

            var item4 = QueryMultipleInternal(cacheKey4,
                cache,
                where4,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4,
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request4));
                maps.Add(where4.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T4
                item4 = QueryMultipleInternal(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2, item3, item4);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="what4">The dynamic expression or the key value to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="what5">The dynamic expression or the key value to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                tableName4: tableName4,
                where4: WhatToQueryGroup(what4),
                tableName5: tableName5,
                where5: WhatToQueryGroup(what5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultipleInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal(cacheKey3,
                cache,
                where3,
                queryGroups);

            var item4 = QueryMultipleInternal(cacheKey4,
                cache,
                where4,
                queryGroups);

            var item5 = QueryMultipleInternal(cacheKey5,
                cache,
                where5,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4,
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request4));
                maps.Add(where4.MapTo());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5,
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request5));
                maps.Add(where5.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // T4
                item4 = QueryMultipleInternal(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T5
                item5 = QueryMultipleInternal(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="what4">The dynamic expression or the key value to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="what5">The dynamic expression or the key value to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="what6">The dynamic expression or the key value to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            string tableName6,
            object what6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                tableName4: tableName4,
                where4: WhatToQueryGroup(what4),
                tableName5: tableName5,
                where5: WhatToQueryGroup(what5),
                tableName6: tableName6,
                where6: WhatToQueryGroup(what6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            string tableName6,
            QueryField where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            string tableName6,
            IEnumerable<QueryField> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                tableName6: tableName6,
                where6: where6,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultipleInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal(cacheKey3,
                cache,
                where3,
                queryGroups);

            var item4 = QueryMultipleInternal(cacheKey4,
                cache,
                where4,
                queryGroups);

            var item5 = QueryMultipleInternal(cacheKey5,
                cache,
                where5,
                queryGroups);

            var item6 = QueryMultipleInternal(cacheKey6,
                cache,
                where6,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4,
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request4));
                maps.Add(where4.MapTo());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5,
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request5));
                maps.Add(where5.MapTo());
            }

            // Item6 Request
            if (item6 == null)
            {
                var request6 = new QueryMultipleRequest(6,
                    tableName6,
                    connection,
                    transaction,
                    fields6,
                    where6,
                    orderBy6,
                    top6,
                    hints6,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request6));
                maps.Add(where6.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // T4
                item4 = QueryMultipleInternal(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T5
                item5 = QueryMultipleInternal(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T6
                item6 = QueryMultipleInternal(connection,
                    reader,
                    item6,
                    cacheKey6,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5, item6);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6, T7

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="what4">The dynamic expression or the key value to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="what5">The dynamic expression or the key value to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="what6">The dynamic expression or the key value to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="what7">The dynamic expression or the key value to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            string tableName6,
            object what6,
            string tableName7,
            object what7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                tableName4: tableName4,
                where4: WhatToQueryGroup(what4),
                tableName5: tableName5,
                where5: WhatToQueryGroup(what5),
                tableName6: tableName6,
                where6: WhatToQueryGroup(what6),
                tableName7: tableName7,
                where7: WhatToQueryGroup(what7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="where7">The query expression to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            string tableName6,
            QueryField where6,
            string tableName7,
            QueryField where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="where7">The query expression to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            string tableName6,
            IEnumerable<QueryField> where6,
            string tableName7,
            IEnumerable<QueryField> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="where7">The query expression to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultiple(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            string tableName7,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            return QueryMultipleInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                tableName6: tableName6,
                where6: where6,
                tableName7: tableName7,
                where7: where7,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="where7">The query expression to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        internal static Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>
            QueryMultipleInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            string tableName7,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = QueryMultipleInternal(cacheKey1,
                cache,
                where1,
                queryGroups);

            var item2 = QueryMultipleInternal(cacheKey2,
                cache,
                where2,
                queryGroups);

            var item3 = QueryMultipleInternal(cacheKey3,
                cache,
                where3,
                queryGroups);

            var item4 = QueryMultipleInternal(cacheKey4,
                cache,
                where4,
                queryGroups);

            var item5 = QueryMultipleInternal(cacheKey5,
                cache,
                where5,
                queryGroups);

            var item6 = QueryMultipleInternal(cacheKey6,
                cache,
                where6,
                queryGroups);

            var item7 = QueryMultipleInternal(cacheKey7,
                cache,
                where7,
                queryGroups);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request1));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request2));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request3));
                maps.Add(where3.MapTo());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4,
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request4));
                maps.Add(where4.MapTo());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5,
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request5));
                maps.Add(where5.MapTo());
            }

            // Item6 Request
            if (item6 == null)
            {
                var request6 = new QueryMultipleRequest(6,
                    tableName6,
                    connection,
                    transaction,
                    fields6,
                    where6,
                    orderBy6,
                    top6,
                    hints6,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request6));
                maps.Add(where6.MapTo());
            }

            // Item7 Request
            if (item7 == null)
            {
                var request7 = new QueryMultipleRequest(7,
                    tableName7,
                    connection,
                    transaction,
                    fields7,
                    where7,
                    orderBy7,
                    top7,
                    hints7,
                    statementBuilder);
                commandTexts.Add(CommandTextCache.GetQueryMultipleText(request7));
                maps.Add(where7.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            var beforeExecutionCallback = new Func<DbCommand, TraceResult>(command =>
                traceResult = Tracer
                    .InvokeBeforeExecution(traceKey, trace, command));

            // Actual Execution
            using (var reader = (DbDataReader)ExecuteReaderInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallback: beforeExecutionCallback))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = QueryMultipleInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false);

                // T2
                item2 = QueryMultipleInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T3
                item3 = QueryMultipleInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);


                // T4
                item4 = QueryMultipleInternal(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T5
                item5 = QueryMultipleInternal(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T6
                item6 = QueryMultipleInternal(connection,
                    reader,
                    item6,
                    cacheKey6,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // T7
                item7 = QueryMultipleInternal(connection,
                    reader,
                    item7,
                    cacheKey7,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5, item6, item7);

                // After Execution
                Tracer
                    .InvokeAfterExecution(traceResult, trace, result);
            }

            // Result
            return result;
        }

        #endregion

        #endregion

        #endregion

        #region QueryMultipleAsync(TableName)

        #region TEntity

        #region T1, T2

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
        /// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
        /// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        /// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                tableName2: tableName2,
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsync<T1, T2>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            return QueryMultipleAsyncInternal<T1, T2>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>>> QueryMultipleAsyncInternal<T1, T2>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo<T2>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                tableName2: tableName2,
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                tableName3: tableName3,
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsync<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>>> QueryMultipleAsyncInternal<T1, T2, T3>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo<T3>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                tableName2: tableName2,
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                tableName3: tableName3,
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                tableName4: tableName4,
                where4: await WhatToQueryGroupAsync(typeof(T4), connection, what4, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            string tableName4,
            Expression<Func<T4, bool>> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsync<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>>>
            QueryMultipleAsyncInternal<T1, T2, T3, T4>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            var item4 = await QueryMultipleAsyncInternal<T4>(cacheKey4,
                cache,
                where4,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo<T3>());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4 ?? FieldCache.Get<T4>(),
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request4, cancellationToken));
                maps.Add(where4.MapTo<T4>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T4
                item4 = await QueryMultipleAsyncInternal<T4>(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3, item4);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                tableName2: tableName2,
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                tableName3: tableName3,
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                tableName4: tableName4,
                where4: await WhatToQueryGroupAsync(typeof(T4), connection, what4, transaction, cancellationToken),
                tableName5: tableName5,
                where5: await WhatToQueryGroupAsync(typeof(T5), connection, what5, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            string tableName4,
            Expression<Func<T4, bool>> where4,
            string tableName5,
            Expression<Func<T5, bool>> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>>>
            QueryMultipleAsyncInternal<T1, T2, T3, T4, T5>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            var item4 = await QueryMultipleAsyncInternal<T4>(cacheKey4,
                cache,
                where4,
                queryGroups,
                cancellationToken);

            var item5 = await QueryMultipleAsyncInternal<T5>(cacheKey5,
                cache,
                where5,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo<T3>());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4 ?? FieldCache.Get<T4>(),
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request4, cancellationToken));
                maps.Add(where4.MapTo<T4>());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5 ?? FieldCache.Get<T5>(),
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request5, cancellationToken));
                maps.Add(where5.MapTo<T5>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T4
                item4 = await QueryMultipleAsyncInternal<T4>(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T5
                item5 = await QueryMultipleAsyncInternal<T5>(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="what6">The dynamic query expression or the key value to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            string tableName6,
            object what6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                tableName2: tableName2,
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                tableName3: tableName3,
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                tableName4: tableName4,
                where4: await WhatToQueryGroupAsync(typeof(T4), connection, what4, transaction, cancellationToken),
                tableName5: tableName5,
                where5: await WhatToQueryGroupAsync(typeof(T5), connection, what5, transaction, cancellationToken),
                tableName6: tableName6,
                where6: await WhatToQueryGroupAsync(typeof(T6), connection, what6, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            string tableName4,
            Expression<Func<T4, bool>> where4,
            string tableName5,
            Expression<Func<T5, bool>> where5,
            string tableName6,
            Expression<Func<T6, bool>> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            string tableName6,
            QueryField where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            string tableName6,
            IEnumerable<QueryField> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                tableName6: tableName6,
                where6: where6,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>>>
            QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            var item4 = await QueryMultipleAsyncInternal<T4>(cacheKey4,
                cache,
                where4,
                queryGroups,
                cancellationToken);

            var item5 = await QueryMultipleAsyncInternal<T5>(cacheKey5,
                cache,
                where5,
                queryGroups,
                cancellationToken);

            var item6 = await QueryMultipleAsyncInternal<T6>(cacheKey6,
                cache,
                where6,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo<T3>());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4 ?? FieldCache.Get<T4>(),
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request4, cancellationToken));
                maps.Add(where4.MapTo<T4>());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5 ?? FieldCache.Get<T5>(),
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request5, cancellationToken));
                maps.Add(where5.MapTo<T5>());
            }

            // Item6 Request
            if (item6 == null)
            {
                var request6 = new QueryMultipleRequest(6,
                    tableName6,
                    connection,
                    transaction,
                    fields6 ?? FieldCache.Get<T6>(),
                    where6,
                    orderBy6,
                    top6,
                    hints6,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request6, cancellationToken));
                maps.Add(where6.MapTo<T6>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T4
                item4 = await QueryMultipleAsyncInternal<T4>(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T5
                item5 = await QueryMultipleAsyncInternal<T5>(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T6
                item6 = await QueryMultipleAsyncInternal<T6>(connection,
                    reader,
                    item6,
                    cacheKey6,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5, item6);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6, T7

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="what4">The dynamic query expression or the key value to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="what5">The dynamic query expression or the key value to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="what6">The dynamic query expression or the key value to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="what7">The dynamic query expression or the key value to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            string tableName6,
            object what6,
            string tableName7,
            object what7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return await QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: await WhatToQueryGroupAsync(typeof(T1), connection, what1, transaction, cancellationToken),
                tableName2: tableName2,
                where2: await WhatToQueryGroupAsync(typeof(T2), connection, what2, transaction, cancellationToken),
                tableName3: tableName3,
                where3: await WhatToQueryGroupAsync(typeof(T3), connection, what3, transaction, cancellationToken),
                tableName4: tableName4,
                where4: await WhatToQueryGroupAsync(typeof(T4), connection, what4, transaction, cancellationToken),
                tableName5: tableName5,
                where5: await WhatToQueryGroupAsync(typeof(T5), connection, what5, transaction, cancellationToken),
                tableName6: tableName6,
                where6: await WhatToQueryGroupAsync(typeof(T6), connection, what6, transaction, cancellationToken),
                tableName7: tableName7,
                where7: await WhatToQueryGroupAsync(typeof(T7), connection, what7, transaction, cancellationToken),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            Expression<Func<T1, bool>> where1,
            string tableName2,
            Expression<Func<T2, bool>> where2,
            string tableName3,
            Expression<Func<T3, bool>> where3,
            string tableName4,
            Expression<Func<T4, bool>> where4,
            string tableName5,
            Expression<Func<T5, bool>> where5,
            string tableName6,
            Expression<Func<T6, bool>> where6,
            string tableName7,
            Expression<Func<T7, bool>> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            string tableName6,
            QueryField where6,
            string tableName7,
            QueryField where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            string tableName6,
            IEnumerable<QueryField> where6,
            string tableName7,
            IEnumerable<QueryField> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsync<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            string tableName7,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            return QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                tableName6: tableName6,
                where6: where6,
                tableName7: tableName7,
                where7: where7,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <typeparam name="T1">The first target type.</typeparam>
        /// <typeparam name="T2">The second target type.</typeparam>
        /// <typeparam name="T3">The third target type.</typeparam>
        /// <typeparam name="T4">The fourth target type.</typeparam>
        /// <typeparam name="T5">The fifth target type.</typeparam>
        /// <typeparam name="T6">The sixth target type.</typeparam>
        /// <typeparam name="T7">The seventh target type.</typeparam>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for T1).</param>
		/// <param name="where1">The query expression to be used (for T1).</param>
        /// <param name="tableName2">The name of the target table (for T2).</param>
		/// <param name="where2">The query expression to be used (for T2).</param>
        /// <param name="tableName3">The name of the target table (for T3).</param>
		/// <param name="where3">The query expression to be used (for T3).</param>
        /// <param name="tableName4">The name of the target table (for T4).</param>
		/// <param name="where4">The query expression to be used (for T4).</param>
        /// <param name="tableName5">The name of the target table (for T5).</param>
		/// <param name="where5">The query expression to be used (for T5).</param>
        /// <param name="tableName6">The name of the target table (for T6).</param>
		/// <param name="where6">The query expression to be used (for T6).</param>
        /// <param name="tableName7">The name of the target table (for T7).</param>
		/// <param name="where7">The query expression to be used (for T7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for T1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for T1).</param>
        /// <param name="top1">The number of rows to be returned (for T1).</param>
        /// <param name="hints1">The table hints to be used (for T1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for T2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for T2).</param>
        /// <param name="top2">The number of rows to be returned (for T2).</param>
        /// <param name="hints2">The table hints to be used (for T2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for T3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for T3).</param>
        /// <param name="top3">The number of rows to be returned (for T3).</param>
        /// <param name="hints3">The table hints to be used (for T3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for T4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for T4).</param>
        /// <param name="top4">The number of rows to be returned (for T4).</param>
        /// <param name="hints4">The table hints to be used (for T4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for T5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for T5).</param>
        /// <param name="top5">The number of rows to be returned (for T5).</param>
        /// <param name="hints5">The table hints to be used (for T5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for T6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for T6).</param>
        /// <param name="top6">The number of rows to be returned (for T6).</param>
        /// <param name="hints6">The table hints to be used (for T6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for T7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for T7).</param>
        /// <param name="top7">The number of rows to be returned (for T7).</param>
        /// <param name="hints7">The table hints to be used (for T7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>>>
            QueryMultipleAsyncInternal<T1, T2, T3, T4, T5, T6, T7>(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            string tableName7,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
            where T1 : class
            where T2 : class
            where T3 : class
            where T4 : class
            where T5 : class
            where T6 : class
            where T7 : class
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal<T1>(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal<T2>(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal<T3>(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            var item4 = await QueryMultipleAsyncInternal<T4>(cacheKey4,
                cache,
                where4,
                queryGroups,
                cancellationToken);

            var item5 = await QueryMultipleAsyncInternal<T5>(cacheKey5,
                cache,
                where5,
                queryGroups,
                cancellationToken);

            var item6 = await QueryMultipleAsyncInternal<T6>(cacheKey6,
                cache,
                where6,
                queryGroups,
                cancellationToken);

            var item7 = await QueryMultipleAsyncInternal<T7>(cacheKey7,
                cache,
                where7,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1 ?? FieldCache.Get<T1>(),
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo<T1>());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2 ?? FieldCache.Get<T2>(),
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo<T2>());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3 ?? FieldCache.Get<T3>(),
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo<T3>());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4 ?? FieldCache.Get<T4>(),
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request4, cancellationToken));
                maps.Add(where4.MapTo<T4>());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5 ?? FieldCache.Get<T5>(),
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request5, cancellationToken));
                maps.Add(where5.MapTo<T5>());
            }

            // Item6 Request
            if (item6 == null)
            {
                var request6 = new QueryMultipleRequest(6,
                    tableName6,
                    connection,
                    transaction,
                    fields6 ?? FieldCache.Get<T6>(),
                    where6,
                    orderBy6,
                    top6,
                    hints6,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request6, cancellationToken));
                maps.Add(where6.MapTo<T6>());
            }

            // Item7 Request
            if (item7 == null)
            {
                var request7 = new QueryMultipleRequest(7,
                    tableName7,
                    connection,
                    transaction,
                    fields7 ?? FieldCache.Get<T7>(),
                    where7,
                    orderBy7,
                    top7,
                    hints7,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request7, cancellationToken));
                maps.Add(where7.MapTo<T7>());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<T1>, IEnumerable<T2>, IEnumerable<T3>, IEnumerable<T4>, IEnumerable<T5>, IEnumerable<T6>, IEnumerable<T7>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: null,
                transaction: transaction,
                trace: null,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal<T1>(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal<T2>(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal<T3>(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T4
                item4 = await QueryMultipleAsyncInternal<T4>(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T5
                item5 = await QueryMultipleAsyncInternal<T5>(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T6
                item6 = await QueryMultipleAsyncInternal<T6>(connection,
                    reader,
                    item6,
                    cacheKey6,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T7
                item7 = await QueryMultipleAsyncInternal<T7>(connection,
                    reader,
                    item7,
                    cacheKey7,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5, item6, item7);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #endregion

        #region Dynamic

        #region T1, T2

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
        /// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
        /// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
        /// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
        /// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        /// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return await QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                top2: top2,
                fields2: fields2,
                orderBy2: orderBy2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 2 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsyncInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            int? top2 = 0,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            string hints2 = null,
            string cacheKey2 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                trace: trace,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return await QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 3 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>> QueryMultipleAsyncInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                trace: trace,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="what4">The dynamic query expression or the key value to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return await QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                tableName4: tableName4,
                where4: WhatToQueryGroup(what4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 4 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsyncInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            var item4 = await QueryMultipleAsyncInternal(cacheKey4,
                cache,
                where4,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4,
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request4, cancellationToken));
                maps.Add(where4.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                trace: trace,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T4
                item4 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3, item4);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="what4">The dynamic query expression or the key value to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="what5">The dynamic query expression or the key value to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return await QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                tableName4: tableName4,
                where4: WhatToQueryGroup(what4),
                tableName5: tableName5,
                where5: WhatToQueryGroup(what5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 5 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsyncInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            var item4 = await QueryMultipleAsyncInternal(cacheKey4,
                cache,
                where4,
                queryGroups,
                cancellationToken);

            var item5 = await QueryMultipleAsyncInternal(cacheKey5,
                cache,
                where5,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4,
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request4, cancellationToken));
                maps.Add(where4.MapTo());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5,
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request5, cancellationToken));
                maps.Add(where5.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                trace: trace,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T4
                item4 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T5
                item5 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="what4">The dynamic query expression or the key value to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="what5">The dynamic query expression or the key value to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="what6">The dynamic query expression or the key value to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            string tableName6,
            object what6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return await QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                tableName4: tableName4,
                where4: WhatToQueryGroup(what4),
                tableName5: tableName5,
                where5: WhatToQueryGroup(what5),
                tableName6: tableName6,
                where6: WhatToQueryGroup(what6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            string tableName6,
            QueryField where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            string tableName6,
            IEnumerable<QueryField> where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                tableName6: tableName6,
                where6: where6,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 6 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsyncInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            var item4 = await QueryMultipleAsyncInternal(cacheKey4,
                cache,
                where4,
                queryGroups,
                cancellationToken);

            var item5 = await QueryMultipleAsyncInternal(cacheKey5,
                cache,
                where5,
                queryGroups,
                cancellationToken);

            var item6 = await QueryMultipleAsyncInternal(cacheKey6,
                cache,
                where6,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4,
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request4, cancellationToken));
                maps.Add(where4.MapTo());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5,
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request5, cancellationToken));
                maps.Add(where5.MapTo());
            }

            // Item6 Request
            if (item6 == null)
            {
                var request6 = new QueryMultipleRequest(6,
                    tableName6,
                    connection,
                    transaction,
                    fields6,
                    where6,
                    orderBy6,
                    top6,
                    hints6,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request6, cancellationToken));
                maps.Add(where6.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                trace: trace,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T4
                item4 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T5
                item5 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T6
                item6 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item6,
                    cacheKey6,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5, item6);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #region T1, T2, T3, T4, T5, T6, T7

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="what1">The dynamic query expression or the key value to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="what2">The dynamic query expression or the key value to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="what3">The dynamic query expression or the key value to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="what4">The dynamic query expression or the key value to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="what5">The dynamic query expression or the key value to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="what6">The dynamic query expression or the key value to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="what7">The dynamic query expression or the key value to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            object what1,
            string tableName2,
            object what2,
            string tableName3,
            object what3,
            string tableName4,
            object what4,
            string tableName5,
            object what5,
            string tableName6,
            object what6,
            string tableName7,
            object what7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return await QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: WhatToQueryGroup(what1),
                tableName2: tableName2,
                where2: WhatToQueryGroup(what2),
                tableName3: tableName3,
                where3: WhatToQueryGroup(what3),
                tableName4: tableName4,
                where4: WhatToQueryGroup(what4),
                tableName5: tableName5,
                where5: WhatToQueryGroup(what5),
                tableName6: tableName6,
                where6: WhatToQueryGroup(what6),
                tableName7: tableName7,
                where7: WhatToQueryGroup(what7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="where7">The query expression to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryField where1,
            string tableName2,
            QueryField where2,
            string tableName3,
            QueryField where3,
            string tableName4,
            QueryField where4,
            string tableName5,
            QueryField where5,
            string tableName6,
            QueryField where6,
            string tableName7,
            QueryField where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="where7">The query expression to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            IEnumerable<QueryField> where1,
            string tableName2,
            IEnumerable<QueryField> where2,
            string tableName3,
            IEnumerable<QueryField> where3,
            string tableName4,
            IEnumerable<QueryField> where4,
            string tableName5,
            IEnumerable<QueryField> where5,
            string tableName6,
            IEnumerable<QueryField> where6,
            string tableName7,
            IEnumerable<QueryField> where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: ToQueryGroup(where1),
                tableName2: tableName2,
                where2: ToQueryGroup(where2),
                tableName3: tableName3,
                where3: ToQueryGroup(where3),
                tableName4: tableName4,
                where4: ToQueryGroup(where4),
                tableName5: tableName5,
                where5: ToQueryGroup(where5),
                tableName6: tableName6,
                where6: ToQueryGroup(where6),
                tableName7: tableName7,
                where7: ToQueryGroup(where7),
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="where7">The query expression to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        public static Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsync(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            string tableName7,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            return QueryMultipleAsyncInternal(connection: connection,
                tableName1: tableName1,
                where1: where1,
                tableName2: tableName2,
                where2: where2,
                tableName3: tableName3,
                where3: where3,
                tableName4: tableName4,
                where4: where4,
                tableName5: tableName5,
                where5: where5,
                tableName6: tableName6,
                where6: where6,
                tableName7: tableName7,
                where7: where7,
                fields1: fields1,
                orderBy1: orderBy1,
                top1: top1,
                hints1: hints1,
                cacheKey1: cacheKey1,
                fields2: fields2,
                orderBy2: orderBy2,
                top2: top2,
                hints2: hints2,
                cacheKey2: cacheKey2,
                fields3: fields3,
                orderBy3: orderBy3,
                top3: top3,
                hints3: hints3,
                cacheKey3: cacheKey3,
                fields4: fields4,
                orderBy4: orderBy4,
                top4: top4,
                hints4: hints4,
                cacheKey4: cacheKey4,
                fields5: fields5,
                orderBy5: orderBy5,
                top5: top5,
                hints5: hints5,
                cacheKey5: cacheKey5,
                fields6: fields6,
                orderBy6: orderBy6,
                top6: top6,
                hints6: hints6,
                cacheKey6: cacheKey6,
                fields7: fields7,
                orderBy7: orderBy7,
                top7: top7,
                hints7: hints7,
                cacheKey7: cacheKey7,
                cacheItemExpiration: cacheItemExpiration,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                cache: null,
                trace: trace,
                statementBuilder: statementBuilder,
                cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
        /// </summary>
        /// <param name="connection">The connection object to be used.</param>
        /// <param name="tableName1">The name of the target table (for dynamic type 1).</param>
		/// <param name="where1">The query expression to be used (for dynamic type 1).</param>
        /// <param name="tableName2">The name of the target table (for dynamic type 2).</param>
		/// <param name="where2">The query expression to be used (for dynamic type 2).</param>
        /// <param name="tableName3">The name of the target table (for dynamic type 3).</param>
		/// <param name="where3">The query expression to be used (for dynamic type 3).</param>
        /// <param name="tableName4">The name of the target table (for dynamic type 4).</param>
		/// <param name="where4">The query expression to be used (for dynamic type 4).</param>
        /// <param name="tableName5">The name of the target table (for dynamic type 5).</param>
		/// <param name="where5">The query expression to be used (for dynamic type 5).</param>
        /// <param name="tableName6">The name of the target table (for dynamic type 6).</param>
		/// <param name="where6">The query expression to be used (for dynamic type 6).</param>
        /// <param name="tableName7">The name of the target table (for dynamic type 7).</param>
		/// <param name="where7">The query expression to be used (for dynamic type 7).</param>
        /// <param name="fields1">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 1).</param>
		/// <param name="orderBy1">The order definition of the fields to be used (for dynamic type 1).</param>
        /// <param name="top1">The number of rows to be returned (for dynamic type 1).</param>
        /// <param name="hints1">The table hints to be used (for dynamic type 1).</param>
        /// <param name="cacheKey1">The key to the cache item 1. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields2">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 2).</param>
		/// <param name="orderBy2">The order definition of the fields to be used (for dynamic type 2).</param>
        /// <param name="top2">The number of rows to be returned (for dynamic type 2).</param>
        /// <param name="hints2">The table hints to be used (for dynamic type 2).</param>
        /// <param name="cacheKey2">The key to the cache item 2. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields3">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 3).</param>
		/// <param name="orderBy3">The order definition of the fields to be used (for dynamic type 3).</param>
        /// <param name="top3">The number of rows to be returned (for dynamic type 3).</param>
        /// <param name="hints3">The table hints to be used (for dynamic type 3).</param>
        /// <param name="cacheKey3">The key to the cache item 3. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields4">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 4).</param>
		/// <param name="orderBy4">The order definition of the fields to be used (for dynamic type 4).</param>
        /// <param name="top4">The number of rows to be returned (for dynamic type 4).</param>
        /// <param name="hints4">The table hints to be used (for dynamic type 4).</param>
        /// <param name="cacheKey4">The key to the cache item 4. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields5">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 5).</param>
		/// <param name="orderBy5">The order definition of the fields to be used (for dynamic type 5).</param>
        /// <param name="top5">The number of rows to be returned (for dynamic type 5).</param>
        /// <param name="hints5">The table hints to be used (for dynamic type 5).</param>
        /// <param name="cacheKey5">The key to the cache item 5. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields6">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 6).</param>
		/// <param name="orderBy6">The order definition of the fields to be used (for dynamic type 6).</param>
        /// <param name="top6">The number of rows to be returned (for dynamic type 6).</param>
        /// <param name="hints6">The table hints to be used (for dynamic type 6).</param>
        /// <param name="cacheKey6">The key to the cache item 6. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="fields7">The mapping list of <see cref="Field"/> objects to be used (for dynamic type 7).</param>
		/// <param name="orderBy7">The order definition of the fields to be used (for dynamic type 7).</param>
        /// <param name="top7">The number of rows to be returned (for dynamic type 7).</param>
        /// <param name="hints7">The table hints to be used (for dynamic type 7).</param>
        /// <param name="cacheKey7">The key to the cache item 7. By setting this argument, it will return the item from the cache if present, otherwise it will query the database. This will only work if the 'cache' argument is set.</param>
        /// <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
		/// <param name="traceKey">The tracing key to be used.</param>
		/// <param name="commandTimeout">The command timeout in seconds to be used.</param>
        /// <param name="transaction">The transaction to be used.</param>
        /// <param name="cache">The cache object to be used.</param>
        /// <param name="trace">The trace object to be used.</param>
        /// <param name="statementBuilder">The statement builder object to be used.</param>
        /// <param name="cancellationToken">The <see cref="CancellationToken"/> object to be used during the asynchronous operation.</param>
        /// <returns>A tuple of 7 enumerable target data entity types.</returns>
        internal static async Task<Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>>>
            QueryMultipleAsyncInternal(this IDbConnection connection,
            string tableName1,
            QueryGroup where1,
            string tableName2,
            QueryGroup where2,
            string tableName3,
            QueryGroup where3,
            string tableName4,
            QueryGroup where4,
            string tableName5,
            QueryGroup where5,
            string tableName6,
            QueryGroup where6,
            string tableName7,
            QueryGroup where7,
            IEnumerable<Field> fields1 = null,
            IEnumerable<OrderField> orderBy1 = null,
            int? top1 = 0,
            string hints1 = null,
            string cacheKey1 = null,
            IEnumerable<Field> fields2 = null,
            IEnumerable<OrderField> orderBy2 = null,
            int? top2 = 0,
            string hints2 = null,
            string cacheKey2 = null,
            IEnumerable<Field> fields3 = null,
            IEnumerable<OrderField> orderBy3 = null,
            int? top3 = 0,
            string hints3 = null,
            string cacheKey3 = null,
            IEnumerable<Field> fields4 = null,
            IEnumerable<OrderField> orderBy4 = null,
            int? top4 = 0,
            string hints4 = null,
            string cacheKey4 = null,
            IEnumerable<Field> fields5 = null,
            IEnumerable<OrderField> orderBy5 = null,
            int? top5 = 0,
            string hints5 = null,
            string cacheKey5 = null,
            IEnumerable<Field> fields6 = null,
            IEnumerable<OrderField> orderBy6 = null,
            int? top6 = 0,
            string hints6 = null,
            string cacheKey6 = null,
            IEnumerable<Field> fields7 = null,
            IEnumerable<OrderField> orderBy7 = null,
            int? top7 = 0,
            string hints7 = null,
            string cacheKey7 = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            int? commandTimeout = null,
            string traceKey = TraceKeys.QueryMultiple,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            ITrace? trace = null,
            IStatementBuilder? statementBuilder = null,
            CancellationToken cancellationToken = default)
        {
            // Variables
            var commandType = CommandType.Text;
            var queryGroups = new List<QueryGroup>();
            var maps = new List<QueryGroupTypeMap>();
            var commandTexts = new List<string>();

            // Items
            var item1 = await QueryMultipleAsyncInternal(cacheKey1,
                cache,
                where1,
                queryGroups,
                cancellationToken);

            var item2 = await QueryMultipleAsyncInternal(cacheKey2,
                cache,
                where2,
                queryGroups,
                cancellationToken);

            var item3 = await QueryMultipleAsyncInternal(cacheKey3,
                cache,
                where3,
                queryGroups,
                cancellationToken);

            var item4 = await QueryMultipleAsyncInternal(cacheKey4,
                cache,
                where4,
                queryGroups,
                cancellationToken);

            var item5 = await QueryMultipleAsyncInternal(cacheKey5,
                cache,
                where5,
                queryGroups,
                cancellationToken);

            var item6 = await QueryMultipleAsyncInternal(cacheKey6,
                cache,
                where6,
                queryGroups,
                cancellationToken);

            var item7 = await QueryMultipleAsyncInternal(cacheKey7,
                cache,
                where7,
                queryGroups,
                cancellationToken);

            // Fix
            QueryGroup.FixForQueryMultiple(queryGroups.ToArray());

            // Item1 Request
            if (item1 == null)
            {
                var request1 = new QueryMultipleRequest(1,
                    tableName1,
                    connection,
                    transaction,
                    fields1,
                    where1,
                    orderBy1,
                    top1,
                    hints1,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request1, cancellationToken));
                maps.Add(where1.MapTo());
            }

            // Item2 Request
            if (item2 == null)
            {
                var request2 = new QueryMultipleRequest(2,
                    tableName2,
                    connection,
                    transaction,
                    fields2,
                    where2,
                    orderBy2,
                    top2,
                    hints2,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request2, cancellationToken));
                maps.Add(where2.MapTo());
            }

            // Item3 Request
            if (item3 == null)
            {
                var request3 = new QueryMultipleRequest(3,
                    tableName3,
                    connection,
                    transaction,
                    fields3,
                    where3,
                    orderBy3,
                    top3,
                    hints3,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request3, cancellationToken));
                maps.Add(where3.MapTo());
            }

            // Item4 Request
            if (item4 == null)
            {
                var request4 = new QueryMultipleRequest(4,
                    tableName4,
                    connection,
                    transaction,
                    fields4,
                    where4,
                    orderBy4,
                    top4,
                    hints4,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request4, cancellationToken));
                maps.Add(where4.MapTo());
            }

            // Item5 Request
            if (item5 == null)
            {
                var request5 = new QueryMultipleRequest(5,
                    tableName5,
                    connection,
                    transaction,
                    fields5,
                    where5,
                    orderBy5,
                    top5,
                    hints5,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request5, cancellationToken));
                maps.Add(where5.MapTo());
            }

            // Item6 Request
            if (item6 == null)
            {
                var request6 = new QueryMultipleRequest(6,
                    tableName6,
                    connection,
                    transaction,
                    fields6,
                    where6,
                    orderBy6,
                    top6,
                    hints6,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request6, cancellationToken));
                maps.Add(where6.MapTo());
            }

            // Item7 Request
            if (item7 == null)
            {
                var request7 = new QueryMultipleRequest(7,
                    tableName7,
                    connection,
                    transaction,
                    fields7,
                    where7,
                    orderBy7,
                    top7,
                    hints7,
                    statementBuilder);
                commandTexts.Add(await CommandTextCache.GetQueryMultipleTextAsync(request7, cancellationToken));
                maps.Add(where7.MapTo());
            }

            // Shared variables
            var commandText = string.Join(" ", commandTexts);
            var param = QueryGroup.AsMappedObject(maps.ToArray(), false);
            Tuple<IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>, IEnumerable<dynamic>> result;
            TraceResult? traceResult = null;

            // Before Execution
            async Task<TraceResult> beforeExecutionCallbackAsync(DbCommand command, CancellationToken cancellationToken) =>
                traceResult = await Tracer
                    .InvokeBeforeExecutionAsync(traceKey, trace, command, cancellationToken);

            // Actual Execution
            using (var reader = (DbDataReader)(await ExecuteReaderAsyncInternal(connection: connection,
                commandText: commandText,
                param: param,
                commandType: commandType,
                commandTimeout: commandTimeout,
                traceKey: traceKey,
                transaction: transaction,
                trace: trace,
                cancellationToken: cancellationToken,
                entityType: null,
                dbFields: null,
                skipCommandArrayParametersCheck: true,
                beforeExecutionCallbackAsync: beforeExecutionCallbackAsync)))
            {
                // Silent cancellation
                if (traceResult?.CancellableTraceLog?.IsCancelled == true)
                {
                    return default;
                }

                // DB setting
                var dbSetting = connection.GetDbSetting();

                // T1
                item1 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item1,
                    cacheKey1,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    false,
                    cancellationToken);

                // T2
                item2 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item2,
                    cacheKey2,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T3
                item3 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item3,
                    cacheKey3,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T4
                item4 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item4,
                    cacheKey4,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T5
                item5 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item5,
                    cacheKey5,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T6
                item6 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item6,
                    cacheKey6,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // T7
                item7 = await QueryMultipleAsyncInternal(connection,
                    reader,
                    item7,
                    cacheKey7,
                    dbSetting,
                    cacheItemExpiration,
                    transaction,
                    cache,
                    true,
                    cancellationToken);

                // Result
                result = Tuple.Create(item1, item2, item3, item4, item5, item6, item7);

                // After Execution
                await Tracer
                    .InvokeAfterExecutionAsync(traceResult, trace, result, cancellationToken);
            }

            // Result
            return result;
        }

        #endregion

        #endregion

        #endregion

        #region Helpers

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="cacheKey"></param>
        /// <param name="cache"></param>
        /// <param name="where"></param>
        /// <param name="queryGroups"></param>
        /// <returns></returns>
        private static IEnumerable<T> QueryMultipleInternal<T>(string cacheKey,
            ICache cache,
            QueryGroup where,
            List<QueryGroup> queryGroups)
            where T : class
        {
            IEnumerable<T> item = null;

            if (cache != null && string.IsNullOrEmpty(cacheKey))
            {
                item = cache?.Get<IEnumerable<T>>(cacheKey, false)?.Value;
            }

            if (item == null)
            {
                queryGroups.Add(where);
            }

            return item;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cacheKey"></param>
        /// <param name="cache"></param>
        /// <param name="where"></param>
        /// <param name="queryGroups"></param>
        /// <returns></returns>
        private static IEnumerable<dynamic> QueryMultipleInternal(string cacheKey,
            ICache cache,
            QueryGroup where,
            List<QueryGroup> queryGroups)
        {
            IEnumerable<dynamic> item = null;

            if (cache != null && string.IsNullOrEmpty(cacheKey))
            {
                item = cache?.Get<IEnumerable<dynamic>>(cacheKey, false)?.Value;
            }

            if (item == null)
            {
                queryGroups.Add(where);
            }

            return item;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="connection"></param>
        /// <param name="reader"></param>
        /// <param name="items"></param>
        /// <param name="cacheKey"></param>
        /// <param name="dbSetting"></param>
        /// <param name="cacheItemExpiration"></param>
        /// <param name="transaction"></param>
        /// <param name="cache"></param>
        /// <param name="forwardToNextResult"></param>
        /// <returns></returns>
        private static IEnumerable<T> QueryMultipleInternal<T>(IDbConnection connection,
            DbDataReader reader,
            IEnumerable<T> items,
            string? cacheKey = null,
            IDbSetting dbSetting = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            bool forwardToNextResult = true)
        {
            if (forwardToNextResult)
            {
                reader.NextResult();
            }

            if (items == null)
            {
                var dbFields = DbFieldCache.Get(connection, ClassMappedNameCache.Get<T>(), transaction, true);
                items = DataReader.ToEnumerable<T>(reader, dbFields, dbSetting).AsList();
            }

            if (cache != null && string.IsNullOrEmpty(cacheKey))
            {
                cache?.Add(cacheKey, items, cacheItemExpiration.GetValueOrDefault(), false);
            }

            return items;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="cacheKey"></param>
        /// <param name="cache"></param>
        /// <param name="where"></param>
        /// <param name="queryGroups"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        private static async Task<IEnumerable<T>> QueryMultipleAsyncInternal<T>(string cacheKey,
            ICache cache,
            QueryGroup where,
            List<QueryGroup> queryGroups,
            CancellationToken cancellationToken = default)
            where T : class
        {
            IEnumerable<T> item = null;

            if (cache != null && string.IsNullOrEmpty(cacheKey))
            {
                item = (await cache?.GetAsync<IEnumerable<T>>(cacheKey, false, cancellationToken))?.Value;
            }

            if (item == null)
            {
                queryGroups.Add(where);
            }

            return item;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cacheKey"></param>
        /// <param name="cache"></param>
        /// <param name="where"></param>
        /// <param name="queryGroups"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        private static async Task<IEnumerable<dynamic>> QueryMultipleAsyncInternal(string cacheKey,
            ICache cache,
            QueryGroup where,
            List<QueryGroup> queryGroups,
            CancellationToken cancellationToken = default)
        {
            IEnumerable<dynamic> item = null;

            if (cache != null && string.IsNullOrEmpty(cacheKey))
            {
                item = (await cache?.GetAsync<IEnumerable<dynamic>>(cacheKey, false, cancellationToken))?.Value;
            }

            if (item == null)
            {
                queryGroups.Add(where);
            }

            return item;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="connection"></param>
        /// <param name="reader"></param>
        /// <param name="items"></param>
        /// <param name="cacheKey"></param>
        /// <param name="dbSetting"></param>
        /// <param name="cacheItemExpiration"></param>
        /// <param name="transaction"></param>
        /// <param name="cache"></param>
        /// <param name="forwardToNextResult"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        private static async Task<IEnumerable<T>> QueryMultipleAsyncInternal<T>(IDbConnection connection,
            DbDataReader reader,
            IEnumerable<T> items,
            string? cacheKey = null,
            IDbSetting dbSetting = null,
            int? cacheItemExpiration = Constant.DefaultCacheItemExpirationInMinutes,
            IDbTransaction? transaction = null,
            ICache? cache = null,
            bool forwardToNextResult = true,
            CancellationToken cancellationToken = default)
        {
            if (forwardToNextResult)
            {
                await reader.NextResultAsync(cancellationToken);
            }

            if (items == null)
            {
                var dbFields = await DbFieldCache.GetAsync(connection, ClassMappedNameCache.Get<T>(), transaction, true, cancellationToken);
                items = await DataReader.ToEnumerableAsync<T>(reader, dbFields, dbSetting, cancellationToken).ToListAsync(cancellationToken);
            }

            if (cache != null && string.IsNullOrEmpty(cacheKey))
            {
                await cache?.AddAsync(cacheKey, items, cacheItemExpiration.GetValueOrDefault(), false, cancellationToken);
            }

            return items;
        }

        #endregion
    }
}
